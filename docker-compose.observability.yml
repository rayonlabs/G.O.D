services:
  grafana:
    container_name: god-grafana
    image: grafana/grafana
    restart: always
    environment:
      # these are the defaults, you should probably change them in deployment
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - ./config/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/otel.yaml
      - ./config/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./config/grafana-validator-general.json:/var/lib/grafana/dashboards/grafana-validator-general.json
      - ./config/grafana-validator-errors.json:/var/lib/grafana/dashboards/grafana-validator-errors.json
      - ./config/grafana-tournament.json:/var/lib/grafana/dashboards/grafana-tournament.json
    ports:
      - ${GRAFANA_PORT:-3000}:3000

  # Training observability services (previously in docker-compose.observability-server.yml)
  grafana-training:
    container_name: god-grafana-training
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_TRAINING_USERNAME:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_TRAINING_PASSWORD:-changeme}
      GF_INSTALL_PLUGINS: redis-datasource
      GF_SERVER_HTTP_PORT: 3001
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_AUTH_ANONYMOUS_ENABLED: ${GRAFANA_ANONYMOUS_ENABLED:-false}
      GF_AUTH_ANONYMOUS_ORG_NAME: "Main Org."
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
      GF_AUTH_BASIC_ENABLED: "true"
    ports:
      - "3001:3001"
    volumes:
      - ./config/grafana-training-datasource.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./config/grafana-training-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./config/grafana-training-dashboard.json:/var/lib/grafana/dashboards/grafana-training-dashboard.json:ro
      - grafana-training-data:/var/lib/grafana
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  otel-collector:
    container_name: god-otel-collector
    image: otel/opentelemetry-collector-contrib:0.106.1
    restart: always
    volumes:
      - ./config/otel-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "0.0.0.0:4317:4317"

  tempo-init:
    scale: 0
    container_name: god-tempo-init
    image: grafana/tempo:latest
    restart: on-failure
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo:/var/tempo

  tempo:
    scale: 0
    container_name: god-tempo
    image: grafana/tempo:latest
    restart: always
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - tempo:/var/tempo
      - ./config/tempo-config.yaml:/etc/tempo.yaml
    depends_on:
      - tempo-init
      - redis

  loki:
    container_name: god-loki
    image: grafana/loki:main
    restart: always
    volumes:
      - loki:/loki
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    container_name: god-prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=7d
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/console
    volumes:
      - prometheus:/prometheus
      - ./config/prometheus-config.yaml:/etc/prometheus/prometheus.yml

  # Training observability services (previously in docker-compose.observability-server.yml)
  loki-training:
    container_name: god-loki-training
    image: grafana/loki:main
    restart: always
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      LOKI_AUTH_ENABLED: ${LOKI_AUTH_ENABLED:-false}
    ports:
      - "3101:3100"
    volumes:
      - loki-training:/loki
      - ./config/loki-training-config.yaml:/etc/loki/local-config.yaml:ro
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus-training:
    container_name: god-prometheus-training
    image: prom/prometheus:latest
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-lifecycle
    ports:
      - "9090:9090"
    volumes:
      - prometheus-training:/prometheus
      - ./config/prometheus-training-config.yaml:/etc/prometheus/prometheus.yml:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  tempo:
  loki:
  prometheus:
  # Training volumes
  grafana-training-data:
  loki-training:
  prometheus-training:
